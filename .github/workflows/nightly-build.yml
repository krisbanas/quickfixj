name: List and Clean Up Maven Artifacts by Version

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - add-nightly-snapshot-release-test-ci

permissions:
  contents: read
  packages: write

jobs:
  inspect-and-clean:
    runs-on: ubuntu-latest
    steps:
      - name: Show artifacts and delete old versions
        shell: python
        env:
          GITHUB_OWNER: krisbanas
          PACKAGE_NAME: org.quickfixj.quickfixj-messages-all
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os
          import requests
          from datetime import datetime, timezone, timedelta

          owner = os.getenv("GITHUB_OWNER")
          package = os.getenv("PACKAGE_NAME")
          token = os.getenv("GITHUB_TOKEN")

          headers = {
              "Accept": "application/vnd.github+json",
              "Authorization": f"Bearer {token}"
          }

          def list_versions(page=1):
              url = f"https://api.github.com/users/{owner}/packages/maven/{package}/versions?per_page=100&page={page}"
              resp = requests.get(url, headers=headers)
              if resp.status_code != 200:
                  print(f"Error listing versions: {resp.status_code}")
                  print(resp.text)
                  return []
              return resp.json()

          def delete_version(version_id):
              url = f"https://api.github.com/users/{owner}/packages/maven/{package}/versions/{version_id}"
              resp = requests.delete(url, headers=headers)
              if resp.status_code == 204:
                  print(f"‚úÖ Deleted version ID {version_id}")
              else:
                  print(f"‚ùå Failed to delete version {version_id}: {resp.status_code}")
                  print(resp.text)

          cutoff = datetime.now(timezone.utc) - timedelta(days=30)
          print(f"üìÖ Deleting versions older than: {cutoff.isoformat()}")

          page = 1
          while True:
              versions = list_versions(page)
              if not versions:
                  break

              for v in versions:
                  vid = v['id']
                  name = v['name']
                  created = datetime.fromisoformat(v['created_at'].replace('Z', '+00:00'))
                  print(f"\nüîπ Version: {name} (ID: {vid})")
                  print(f"   Created: {created}")
                  print(f"   Artifacts:")

                  metadata = v.get("metadata", {})
                  container = metadata.get("container", {})
                  if container:
                      for file in container.get("tags", []):
                          print(f"     üìÑ {file}")
                  else:
                      print("     ‚ö†Ô∏è No detailed artifact metadata available")

                  if created < cutoff:
                      print(f"   üö® Deleting version '{name}' (older than 30 days)")
                  else:
                      print(f"   ‚úÖ Keeping version '{name}'")

              if len(versions) < 100:
                  break
              page += 1
